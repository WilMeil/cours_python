import socket
import argparse
import csv
from concurrent.futures import ThreadPoolExecutor, as_completed

def scan_port(ip, port, timeout=1):
    """Retourne True si le port est ouvert, False sinon"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(timeout)
        try:
            s.connect((ip, port))
            return port, True
        except (socket.timeout, ConnectionRefusedError, OSError):
            return port, False

def main():
    parser = argparse.ArgumentParser(description="Mini-scanner de ports TCP")
    parser.add_argument("--ip", required=True, help="Adresse IP à scanner")
    parser.add_argument("--start-port", type=int, default=1, help="Port de début")
    parser.add_argument("--end-port", type=int, default=1024, help="Port de fin")
    parser.add_argument("--threads", type=int, default=100, help="Nombre de threads (par défaut: 100)")
    parser.add_argument("--verbose", action="store_true", help="Afficher aussi les ports fermés")
    parser.add_argument("--output", help="Fichier CSV de sortie (facultatif)")
    
    args = parser.parse_args()
    ip = args.ip
    start = args.start_port
    end = args.end_port
    verbose = args.verbose
    output_file = args.output

    ports_to_scan = range(start, end + 1)
    open_ports = []

    print(f"Scanning {ip} from port {start} to {end} with {args.threads} threads...")

    try:
        with ThreadPoolExecutor(max_workers=args.threads) as executor:
            futures = [executor.submit(scan_port, ip, port) for port in ports_to_scan]
            for future in as_completed(futures):
                port, is_open = future.result()
                if is_open:
                    print(f"[+] Port {port} ouvert")
                    open_ports.append(port)
                elif verbose:
                    print(f"[-] Port {port} fermé")
    except socket.gaierror:
        print(f"Erreur : l'adresse IP '{ip}' est invalide.")
        return
    except KeyboardInterrupt:
        print("\nScan interrompu.")
        return

    if output_file:
        with open(output_file, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['Port', 'Statut'])
            for port in open_ports:
                writer.writerow([port, 'ouvert'])
        print(f"\nRésultat sauvegardé dans '{output_file}'")

if __name__ == "__main__":
    main()
