import psutil
import os
import time
import platform

def clear_screen():
    os.system('cls' if platform.system() == 'Windows' else 'clear')

def ascii_bar(percent, length=20):
    filled = int(percent / 100 * length)
    return '‚ñà' * filled + '-' * (length - filled)

def display_dashboard():
    try:
        while True:
            clear_screen()
            print("üìà Tableau de bord syst√®me (actualis√© toutes les 5s)\n")
            print("=== CPU ===")
            print(f"Utilisation totale : {psutil.cpu_percent()}%")
            per_cpu = psutil.cpu_percent(percpu=True)
            for i, p in enumerate(per_cpu):
                print(f"  Coeur {i}: {ascii_bar(p)} {p:.1f}%")
            print("\n=== M√©moire ===")
            mem = psutil.virtual_memory()
            print(f"  Totale : {mem.total / 1e9:.2f} GB")
            print(f"  Utilis√©e : {mem.used / 1e9:.2f} GB")
            print(f"  Libre : {mem.available / 1e9:.2f} GB")
            print("\n=== Disque ===")
            for part in psutil.disk_partitions():
                try:
                    usage = psutil.disk_usage(part.mountpoint)
                    print(f"  {part.device} ({part.mountpoint}) : {usage.percent}% utilis√©")
                except PermissionError:
                    continue
            print("\n=== R√©seau (global) ===")
            net = psutil.net_io_counters()
            print(f"  Envoy√©s : {net.bytes_sent / 1e6:.2f} MB | Re√ßus : {net.bytes_recv / 1e6:.2f} MB")
            print("\n=== R√©seau (interfaces) ===")
            per_nic = psutil.net_io_counters(pernic=True)
            for nic, stats in per_nic.items():
                print(f"  {nic} - Envoy√©s : {stats.bytes_sent / 1e6:.2f} MB, Re√ßus : {stats.bytes_recv / 1e6:.2f} MB")
            if hasattr(psutil, "sensors_temperatures"):
                temps = psutil.sensors_temperatures()
                if temps:
                    print("\n=== Temp√©ratures CPU ===")
                    for name, entries in temps.items():
                        for entry in entries:
                            print(f"  {entry.label or name}: {entry.current}¬∞C")
            with open("system_log.csv", "a") as f:
                f.write(f"{time.ctime()},{psutil.cpu_percent()},{mem.used},{net.bytes_sent},{net.bytes_recv}\n")
            print("\nTapez Ctrl+C pour quitter.")
            time.sleep(5)
    except KeyboardInterrupt:
        print("\nSortie propre du programme.")

if __name__ == '__main__':
    display_dashboard()
